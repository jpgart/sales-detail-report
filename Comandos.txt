"""
# Tips de personalización visual para el reporte en Google Sites y React

- Puedes ajustar el tamaño del reporte embebido (iframe) directamente en Google Sites arrastrando los bordes o editando las propiedades de ancho/alto.
- Si el reporte se ve cortado, aumenta la altura del iframe o habilita el scroll vertical en Google Sites.
- Para cambiar el color de fondo de la sección donde está el reporte, usa las opciones de diseño de Google Sites.
- Si quieres que el reporte combine con un fondo oscuro o claro, puedes modificar los estilos globales en el archivo CSS principal del proyecto React (por ejemplo, App.css o index.css).
- Para ocultar elementos no deseados (como barras superiores de GitHub Pages), puedes agregar reglas CSS en tu proyecto React, por ejemplo:
  ```css
  #gh-pages-navbar { display: none !important; }
  ```
- Si necesitas un tamaño fijo o máximo para el reporte, puedes establecerlo en el CSS del proyecto React:
  ```css
  #root { max-width: 1200px; margin: auto; }
  ```
- Recuerda que cualquier cambio visual en el código React requiere volver a hacer `npm run build` y `npm run deploy` para que se refleje online.
- Si tienes un diseño específico en mente, puedes compartir un ejemplo y adaptar el CSS o los componentes del reporte según tus necesidades.

# 1. Ve a la carpeta del proyecto
cd "/Users/jp/Documents/Famus 3.0/famus-report-analysis"

# 2. Activa el ambiente virtual (.venv)
source .venv/bin/activate

# 3. Instala las librerías en el ambiente virtual
pip install -r requirements.txt

python src/main.py

"""
# Ejecuta esto en un script o en la consola interactiva de Python
from src.reporting import generate_executive_summary_report

# Cambia el string por la temporada que deseas (debe existir el CSV correspondiente)
generate_executive_summary_report('2024-2025')

from src.reporting import generate_executive_summary_report
generate_executive_summary_report('2024-2025')

python src/main_html.py

analysisv2

python src/analysisv2.py "2023-2024,2024-2025"


main
python3 src/main.py --season 2024-2025


html
cd "reports/html_reports/2025-06-16_ReactReport"
cd "/Users/jp/Documents/Famus 3.0/famus-report-analysis/reports/html_reports/2025-06-16_ReactReport"

npm install
npm run build
npm start

# ¿Cuándo usar npm start y npm run build?

# - Si quieres trabajar en modo desarrollo y ver los cambios en vivo:
#   Ejecuta:
#   npm start
#   Esto levanta el servidor de desarrollo y recarga automáticamente los cambios. No necesitas ejecutar npm run build para esto.

# - Si quieres generar los archivos finales optimizados para producción (por ejemplo, para subirlos a un servidor o abrir el HTML fuera del entorno de desarrollo):
#   Ejecuta:
#   npm run build
#   Esto crea la carpeta build (o dist) con los archivos listos para producción.

# Resumen:
# - Para desarrollo: solo npm start
# - Para producción: npm run build

# Publicar el reporte en GitHub Pages (opción recomendada)

1. Crea una cuenta en https://github.com si no tienes una.

2. Crea un nuevo repositorio (puede ser público o privado, pero el sitio será público).

3. En tu terminal, navega a la carpeta raíz del proyecto React:
cd "/Users/jp/Documents/Famus 3.0/famus-report-analysis/reports/html_reports/2025-06-16_ReactReport"

4. Inicializa git (si no lo has hecho):
git init
git remote add origin https://github.com/usuario/nombre-repo.git

5. Agrega todos los archivos y haz el primer commit:
git add .
git commit -m "Primer commit del reporte"

git branch -M main
git push -u origin main

6. Ejecuta el build para producción:
npm run build

7. Instala el paquete gh-pages (solo la primera vez):
npm install --save gh-pages

8. Abre package.json y agrega estas líneas:

En "scripts":
  "predeploy": "npm run build",
  "deploy": "gh-pages -d build"

Y agrega (si no existe) en la raíz del package.json:
  "homepage": "https://usuario.github.io/nombre-repo"

9. Publica el sitio ejecutando:
npm run deploy

10. Accede a la URL:
https://usuario.github.io/nombre-repo

11. Puedes insertar esa URL en Google Sites usando el widget de "Insertar" → "Por URL".

# Reemplaza "usuario" y "nombre-repo" por tu usuario y nombre de repositorio en GitHub.

# ¿Tengo que ejecutar siempre npm run deploy para que el reporte funcione?

No. Solo necesitas ejecutar `npm run deploy` cuando quieras actualizar el reporte publicado en GitHub Pages (por ejemplo, si cambias el código o los datos).

Una vez desplegado, el reporte queda disponible en la URL pública (por ejemplo, https://jpgart.github.io/sales-detail-report) y cualquier persona podrá verlo sin que tu Mac esté encendida ni ejecutando nada.

- Ejecuta `npm run deploy` solo cuando quieras subir una nueva versión.
- El reporte queda online y accesible 24/7 desde la URL de GitHub Pages.
- Puedes insertar esa URL en Google Sites o compartirla con quien quieras.

Matar terminal
Ctrl + C

